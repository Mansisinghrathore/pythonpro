The task is to create a contact management program 📇 that allows users to store, view 👀, edit ✏️, and delete 🗑️ contact information.
 The contacts, including name, phone number 📞, and email address 📧, are saved in a JSON file for persistent storage 💾. 
The program features a text-based menu interface, enabling easy interaction for adding, managing, and maintaining contact information.



************************code*********************************

import json
import os

class Contact:
    def __init__(self, name, phone, email):
        self.name = name
        self.phone = phone
        self.email = email

    def to_dict(self):
        return {"name": self.name, "phone": self.phone, "email": self.email}

    @staticmethod
    def from_dict(data):
        return Contact(data["name"], data["phone"], data["email"])

    def __str__(self):
        return f"Name: {self.name}, Phone: {self.phone}, Email: {self.email}"


class ContactManager:
    def __init__(self, filename="contacts.json"):
        self.filename = filename
        self.contacts = []
        self.load_contacts()

    def load_contacts(self):
        if os.path.exists(self.filename):
            with open(self.filename, "r") as file:
                self.contacts = [Contact.from_dict(contact) for contact in json.load(file)]

    def save_contacts(self):
        with open(self.filename, "w") as file:
            json.dump([contact.to_dict() for contact in self.contacts], file)

    def add_contact(self, name, phone, email):
        new_contact = Contact(name, phone, email)
        self.contacts.append(new_contact)
        self.save_contacts()
        print("Contact added successfully.")

    def view_contacts(self):
        if not self.contacts:
            print("No contacts found.")
        else:
            for index, contact in enumerate(self.contacts):
                print(f"{index + 1}. {contact}")

    def edit_contact(self, index, name, phone, email):
        if 0 <= index < len(self.contacts):
            self.contacts[index] = Contact(name, phone, email)
            self.save_contacts()
            print("Contact updated successfully.")
        else:
            print("Invalid contact index.")

    def delete_contact(self, index):
        if 0 <= index < len(self.contacts):
            self.contacts.pop(index)
            self.save_contacts()
            print("Contact deleted successfully.")
        else:
            print("Invalid contact index.")

    def run(self):
        while True:
            print("\nContact Manager")
            print("1. Add Contact")
            print("2. View Contacts")
            print("3. Edit Contact")
            print("4. Delete Contact")
            print("5. Exit")
            choice = input("Choose an option: ")

            if choice == '1':
                name = input("Enter name: ")
                phone = input("Enter phone number: ")
                email = input("Enter email address: ")
                self.add_contact(name, phone, email)
            elif choice == '2':
                self.view_contacts()
            elif choice == '3':
                self.view_contacts()
                index = int(input("Enter the contact number to edit: ")) - 1
                name = input("Enter new name: ")
                phone = input("Enter new phone number: ")
                email = input("Enter new email address: ")
                self.edit_contact(index, name, phone, email)
            elif choice == '4':
                self.view_contacts()
                index = int(input("Enter the contact number to delete: ")) - 1
                self.delete_contact(index)
            elif choice == '5':
                print("Exiting program.")
                break
            else:
                print("Invalid choice. Please try again.")


if __name__ == "__main__":
    manager = ContactManager()
    manager.run()
